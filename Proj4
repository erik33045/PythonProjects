'''
Analysis of Algorithms Project 4
'''

import networkx as nx
import matplotlib.pyplot as plt

input_file = open('input.txt', 'r')

G = nx.Graph()
H = nx.Graph()

vals = input_file.readline().split()

count = 0
max_count = 0
ordered = []
check = []

##for i in range(1,int(vals[0])+1):
##  count += 1
##  print count

for i in range(1, int(vals[1])+1):
  edge = input_file.readline().split()
  edge = map(int, edge)
  u = edge[0]
  v = edge[1]
  G.add_edge(u, v)

for i in range(1, len(G.nodes())+1):
  ordered.append([i,sorted(G[i].keys())]) # may not need to be sorted

ordered.sort(key = lambda s: len(s[1]), reverse = True)

node_num = len(G.nodes()) / 2
##print ordered
##print check

for i in range(0, node_num):
  check.append(ordered[i][0])
  c = check[-1]
##  print '\nchecking:', check, c
##  print 'union', set(G.neighbors(c)).intersection(check)
  length = len(G.neighbors(c)) - (len(set(G.neighbors(c)).intersection(check))) * 2
##  print 'connections:', length, 'out of', len(G.neighbors(c))
  count += length
##  print 'count:', count
  if count > max_count:
    max_count = count
  elif count < max_count:
    del check[-1]

print '\n'
print 'max crossing edges:', max_count
##print 'nodes in group A:', check


difference = []
input_file.close()

##nx.draw(G)
##plt.show()
