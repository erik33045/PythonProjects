#define LOW = 0
#define HIGH = 1
#define NOTHING = 2

typedef struct{
	int val;
	int parent;
} cell

cell value[number_of_weeks][3];

do_most_work(int job_array[][], int number_of_weeks){

	if(number_of_weeks == 0)
		return 0;

	for j from LOW to NOTHING #initialize placeholder row
		value[0][j].val = 0
		value[0][j].parent = NOTHING

	for i from 1 to number_of_weeks
		value[i][HIGH].parent = NOTHING

	for i from 1 to number_of_weeks
		l_val = job_array[LOW][i].val
		h_val = job_array[HIGH][i].val
		
		prev_l = value[i-1][LOW].val
		prev_h = value[i-1][HIGH].val
		prev_n = value[i-1][NOTHING].val


		value[i][HIGH].val = prev_n + h_val
		
		if(prev_h > prev_l)
			value[i][LOW].val = prev_h + l_val
			value[i][LOW].parent = HIGH
			
			value[i][NOTHING].val = prev_h
			value[i][NOTHING].parent = HIGH
		
		else
			value[i][LOw].val= prev_l + l_val
			value[i][LOW].parent = LOW
			
			value[i][NOTHING].val = prev_l
			value[i][NOTHING].parent = LOW
		

	low_final = value[number_of_weeks][LOW].val
	high_final = value[number_of_weeks][HIGH].val

	if( high_final > low_final)
		
		print high_final
		reconstruct_path(HIGH, number_of_weeks)
		
	else
		print low_final
		reconstruct_path(LOW, number_of_weeks)

reconstruct_path(int step, int week)
	
	if( week == 1 ) 
		print step + '\n';
		return;
	
	switch(step){
	case LOW:
		reconstruct_path(value[week][LOW].parent, week-1)
		print L + ' ',
		break
	case HIGH:
		reconstruct_path(value[week][HIGH].parent,week-1)
		print H + ' ',
		break
	case NOTHING:
		reconstruct_path(value[week][NOTHING].parent,week-1)
		print N + ' ',
		break
	
	}
	return
